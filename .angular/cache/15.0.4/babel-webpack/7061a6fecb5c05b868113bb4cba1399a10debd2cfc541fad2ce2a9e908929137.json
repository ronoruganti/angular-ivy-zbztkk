{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { HackerNewsApiService } from './hacker-news-api.service';\nlet httpClientSpy;\nlet hackerNewsService;\ndescribe('AppComponent', () => {\n  beforeEach(() => {\n    // TODO: spy on other methods too\n    httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n    hackerNewsService = new HackerNewsApiService(httpClientSpy);\n  });\n  it('should return expected array of news stories (HttpClient called once)', done => {\n    const expectedStories = [{\n      title: '',\n      url: 'A'\n    }, {\n      title: '',\n      url: 'B'\n    }];\n    httpClientSpy.get.and.returnValue(of(expectedStories));\n    hackerNewsService.getLatestStories().subscribe({\n      next: stories => {\n        expect(stories).withContext('expected stories').toEqual(expectedStories);\n        done();\n      },\n      error: done.fail\n    });\n    expect(httpClientSpy.get.calls.count()).withContext('one call').toBe(1);\n  });\n  it('should return an error when the server returns a 404', done => {\n    const errorResponse = new HttpErrorResponse({\n      error: 'test 404 error',\n      status: 404,\n      statusText: 'Not Found'\n    });\n    httpClientSpy.get.and.returnValue(throwError(() => new Error(errorResponse.toString())));\n    hackerNewsService.getLatestStories().subscribe({\n      next: stories => done.fail('expected an error, not stories'),\n      error: error => {\n        expect(error.message).toContain('test 404 error');\n        done();\n      }\n    });\n  });\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,iBAAiB,QAAQ,sBAAsB;AACpE,SAASC,EAAE,EAAEC,UAAU,QAAQ,MAAM;AACrC,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,IAAIC,aAAyC;AAC7C,IAAIC,iBAAuC;AAC3CC,QAAQ,CAAC,cAAc,EAAE,MAAK;EAC5BC,UAAU,CAAC,MAAK;IACd;IACAH,aAAa,GAAGI,OAAO,CAACC,YAAY,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,CAAC;IAC3DJ,iBAAiB,GAAG,IAAIF,oBAAoB,CAACC,aAAa,CAAC;EAC7D,CAAC,CAAC;EAEFM,EAAE,CAAC,uEAAuE,EAAGC,IAAY,IAAI;IAC3F,MAAMC,eAAe,GACnB,CAAC;MAAEC,KAAK,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAE,EAAE;MAAED,KAAK,EAAE,EAAE;MAAEC,GAAG,EAAE;IAAG,CAAE,CAAC;IAEpDV,aAAa,CAACW,GAAG,CAACC,GAAG,CAACC,WAAW,CAAChB,EAAE,CAACW,eAAe,CAAC,CAAC;IAEtDP,iBAAiB,CAACa,gBAAgB,EAAE,CAACC,SAAS,CAAC;MAC7CC,IAAI,EAAEC,OAAO,IAAG;QACdC,MAAM,CAACD,OAAO,CAAC,CACZE,WAAW,CAAC,kBAAkB,CAAC,CAC/BC,OAAO,CAACZ,eAAe,CAAC;QAC3BD,IAAI,EAAE;MACR,CAAC;MACDc,KAAK,EAAEd,IAAI,CAACe;KACb,CAAC;IACFJ,MAAM,CAAClB,aAAa,CAACW,GAAG,CAACY,KAAK,CAACC,KAAK,EAAE,CAAC,CACpCL,WAAW,CAAC,UAAU,CAAC,CACvBM,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;EAEFnB,EAAE,CAAC,sDAAsD,EAAGC,IAAY,IAAI;IAC1E,MAAMmB,aAAa,GAAG,IAAI9B,iBAAiB,CAAC;MAC1CyB,KAAK,EAAE,gBAAgB;MACvBM,MAAM,EAAE,GAAG;MAAEC,UAAU,EAAE;KAC1B,CAAC;IAEF5B,aAAa,CAACW,GAAG,CAACC,GAAG,CAACC,WAAW,CAACf,UAAU,CAAC,MAAM,IAAI+B,KAAK,CAACH,aAAa,CAACI,QAAQ,EAAE,CAAC,CAAC,CAAC;IAExF7B,iBAAiB,CAACa,gBAAgB,EAAE,CAACC,SAAS,CAAC;MAC7CC,IAAI,EAAEC,OAAO,IAAIV,IAAI,CAACe,IAAI,CAAC,gCAAgC,CAAC;MAC5DD,KAAK,EAAEA,KAAK,IAAG;QACbH,MAAM,CAACG,KAAK,CAACU,OAAO,CAAC,CAACC,SAAS,CAAC,gBAAgB,CAAC;QACjDzB,IAAI,EAAE;MACR;KACD,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","names":["HttpErrorResponse","of","throwError","HackerNewsApiService","httpClientSpy","hackerNewsService","describe","beforeEach","jasmine","createSpyObj","it","done","expectedStories","title","url","get","and","returnValue","getLatestStories","subscribe","next","stories","expect","withContext","toEqual","error","fail","calls","count","toBe","errorResponse","status","statusText","Error","toString","message","toContain"],"sourceRoot":"","sources":["C:\\Users\\Tanuj\\Downloads\\angular-ivy-zbztkk\\src\\app\\hacker-news-api.service.spec.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { of, throwError } from 'rxjs';\r\nimport { HackerNewsApiService } from './hacker-news-api.service';\r\nlet httpClientSpy: jasmine.SpyObj<HttpClient>;\r\nlet hackerNewsService: HackerNewsApiService;\r\ndescribe('AppComponent', () => {\r\n  beforeEach(() => {\r\n    // TODO: spy on other methods too\r\n    httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\r\n    hackerNewsService = new HackerNewsApiService(httpClientSpy);\r\n  });\r\n\r\n  it('should return expected array of news stories (HttpClient called once)', (done: DoneFn) => {\r\n    const expectedStories: Array<any> =\r\n      [{ title: '', url: 'A' }, { title: '', url: 'B' }];\r\n\r\n    httpClientSpy.get.and.returnValue(of(expectedStories));\r\n\r\n    hackerNewsService.getLatestStories().subscribe({\r\n      next: stories => {\r\n        expect(stories)\r\n          .withContext('expected stories')\r\n          .toEqual(expectedStories);\r\n        done();\r\n      },\r\n      error: done.fail\r\n    });\r\n    expect(httpClientSpy.get.calls.count())\r\n      .withContext('one call')\r\n      .toBe(1);\r\n  });\r\n\r\n  it('should return an error when the server returns a 404', (done: DoneFn) => {\r\n    const errorResponse = new HttpErrorResponse({\r\n      error: 'test 404 error',\r\n      status: 404, statusText: 'Not Found'\r\n    });\r\n\r\n    httpClientSpy.get.and.returnValue(throwError(() => new Error(errorResponse.toString())));\r\n\r\n    hackerNewsService.getLatestStories().subscribe({\r\n      next: stories => done.fail('expected an error, not stories'),\r\n      error: error => {\r\n        expect(error.message).toContain('test 404 error');\r\n        done();\r\n      }\r\n    });\r\n  });\r\n});"]},"metadata":{},"sourceType":"module","externalDependencies":[]}