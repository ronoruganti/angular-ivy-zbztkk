{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { HackerNewsApiService } from './hacker-news-api.service';\nlet httpClientSpy;\nlet hackerNewsService;\nbeforeEach(() => {\n  // TODO: spy on other methods too\n  httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\n  hackerNewsService = new HackerNewsApiService(httpClientSpy);\n});\nit('should return expected array of news stories (HttpClient called once)', done => {\n  const expectedStories = [{\n    title: '',\n    url: 'A'\n  }, {\n    title: '',\n    url: 'B'\n  }];\n  httpClientSpy.get.and.returnValue(of(expectedStories));\n  hackerNewsService.getLatestStories().subscribe({\n    next: stories => {\n      expect(stories).withContext('expected stories').toEqual(expectedStories);\n      done();\n    },\n    error: done.fail\n  });\n  expect(httpClientSpy.get.calls.count()).withContext('one call').toBe(1);\n});\nit('should return an error when the server returns a 404', done => {\n  const errorResponse = new HttpErrorResponse({\n    error: 'test 404 error',\n    status: 404,\n    statusText: 'Not Found'\n  });\n  httpClientSpy.get.and.returnValue(throwError(() => new Error(errorResponse.toString())));\n  hackerNewsService.getLatestStories().subscribe({\n    next: stories => done.fail('expected an error, not stories'),\n    error: error => {\n      expect(error.message).toContain('test 404 error');\n      done();\n    }\n  });\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,iBAAiB,QAAQ,sBAAsB;AACpE,SAASC,EAAE,EAAEC,UAAU,QAAQ,MAAM;AACrC,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,IAAIC,aAAyC;AAC7C,IAAIC,iBAAuC;AAE3CC,UAAU,CAAC,MAAK;EACd;EACAF,aAAa,GAAGG,OAAO,CAACC,YAAY,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,CAAC;EAC3DH,iBAAiB,GAAG,IAAIF,oBAAoB,CAACC,aAAa,CAAC;AAC7D,CAAC,CAAC;AAEFK,EAAE,CAAC,uEAAuE,EAAGC,IAAY,IAAI;EAC3F,MAAMC,eAAe,GACnB,CAAC;IAAEC,KAAK,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAE,EAAE;IAAED,KAAK,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAE,CAAC;EAEpDT,aAAa,CAACU,GAAG,CAACC,GAAG,CAACC,WAAW,CAACf,EAAE,CAACU,eAAe,CAAC,CAAC;EAEtDN,iBAAiB,CAACY,gBAAgB,EAAE,CAACC,SAAS,CAAC;IAC7CC,IAAI,EAAEC,OAAO,IAAG;MACdC,MAAM,CAACD,OAAO,CAAC,CACZE,WAAW,CAAC,kBAAkB,CAAC,CAC/BC,OAAO,CAACZ,eAAe,CAAC;MAC3BD,IAAI,EAAE;IACR,CAAC;IACDc,KAAK,EAAEd,IAAI,CAACe;GACb,CAAC;EACFJ,MAAM,CAACjB,aAAa,CAACU,GAAG,CAACY,KAAK,CAACC,KAAK,EAAE,CAAC,CACpCL,WAAW,CAAC,UAAU,CAAC,CACvBM,IAAI,CAAC,CAAC,CAAC;AACZ,CAAC,CAAC;AAEFnB,EAAE,CAAC,sDAAsD,EAAGC,IAAY,IAAI;EAC1E,MAAMmB,aAAa,GAAG,IAAI7B,iBAAiB,CAAC;IAC1CwB,KAAK,EAAE,gBAAgB;IACvBM,MAAM,EAAE,GAAG;IAAEC,UAAU,EAAE;GAC1B,CAAC;EAEF3B,aAAa,CAACU,GAAG,CAACC,GAAG,CAACC,WAAW,CAACd,UAAU,CAAC,MAAM,IAAI8B,KAAK,CAACH,aAAa,CAACI,QAAQ,EAAE,CAAC,CAAC,CAAC;EAExF5B,iBAAiB,CAACY,gBAAgB,EAAE,CAACC,SAAS,CAAC;IAC7CC,IAAI,EAAEC,OAAO,IAAIV,IAAI,CAACe,IAAI,CAAC,gCAAgC,CAAC;IAC5DD,KAAK,EAAEA,KAAK,IAAI;MACdH,MAAM,CAACG,KAAK,CAACU,OAAO,CAAC,CAACC,SAAS,CAAC,gBAAgB,CAAC;MACjDzB,IAAI,EAAE;IACR;GACD,CAAC;AACJ,CAAC,CAAC","names":["HttpErrorResponse","of","throwError","HackerNewsApiService","httpClientSpy","hackerNewsService","beforeEach","jasmine","createSpyObj","it","done","expectedStories","title","url","get","and","returnValue","getLatestStories","subscribe","next","stories","expect","withContext","toEqual","error","fail","calls","count","toBe","errorResponse","status","statusText","Error","toString","message","toContain"],"sourceRoot":"","sources":["C:\\Users\\Tanuj\\Downloads\\angular-ivy-zbztkk\\src\\app\\hacker-news-api.service.spec.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { of, throwError } from 'rxjs';\r\nimport { HackerNewsApiService } from './hacker-news-api.service';\r\nlet httpClientSpy: jasmine.SpyObj<HttpClient>;\r\nlet hackerNewsService: HackerNewsApiService;\r\n\r\nbeforeEach(() => {\r\n  // TODO: spy on other methods too\r\n  httpClientSpy = jasmine.createSpyObj('HttpClient', ['get']);\r\n  hackerNewsService = new HackerNewsApiService(httpClientSpy);\r\n});\r\n\r\nit('should return expected array of news stories (HttpClient called once)', (done: DoneFn) => {\r\n  const expectedStories: Array<any> =\r\n    [{ title: '', url: 'A' }, { title: '', url: 'B' }];\r\n\r\n  httpClientSpy.get.and.returnValue(of(expectedStories));\r\n\r\n  hackerNewsService.getLatestStories().subscribe({\r\n    next: stories => {\r\n      expect(stories)\r\n        .withContext('expected stories')\r\n        .toEqual(expectedStories);\r\n      done();\r\n    },\r\n    error: done.fail\r\n  });\r\n  expect(httpClientSpy.get.calls.count())\r\n    .withContext('one call')\r\n    .toBe(1);\r\n});\r\n\r\nit('should return an error when the server returns a 404', (done: DoneFn) => {\r\n  const errorResponse = new HttpErrorResponse({\r\n    error: 'test 404 error',\r\n    status: 404, statusText: 'Not Found'\r\n  });\r\n\r\n  httpClientSpy.get.and.returnValue(throwError(() => new Error(errorResponse.toString())));\r\n\r\n  hackerNewsService.getLatestStories().subscribe({\r\n    next: stories => done.fail('expected an error, not stories'),\r\n    error: error  => {\r\n      expect(error.message).toContain('test 404 error');\r\n      done();\r\n    }\r\n  });\r\n});"]},"metadata":{},"sourceType":"module","externalDependencies":[]}